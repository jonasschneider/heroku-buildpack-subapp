#!/usr/bin/env bash
set -e

# Build options read from application config (not sure if this is sane)
BUILDPACK=`cat $3/SUBAPP_BUILDPACK`
SUBAPP_PATH=`cat $3/SUBAPP_PATH`

echo "=====> Compiling subapp '"$SUBAPP_PATH"'"


# Throw out everything except the subapp
storage=$(mktemp -d -t restofappXXXXX)
shopt -s dotglob
mv $1/* $storage
mv $storage/$SUBAPP_PATH/* $1/

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

unset GIT_DIR

dir=$(mktemp -t buildpackXXXXX)
rm -rf $dir

url=${BUILDPACK%#*}
branch=${BUILDPACK#*#}

if [ "$branch" == "$url" ]; then
  branch=""
fi

if [ "$url" != "" ]; then
  echo "       Downloading Buildpack: $url"

  if [[ "$url" =~ \.tgz$ ]]; then
    mkdir -p "$dir"
    curl -s "$url" | tar xvz -C "$dir" >/dev/null 2>&1
  else
    git clone $url $dir >/dev/null 2>&1
  fi
  cd $dir

  if [ "$branch" != "" ]; then
    git checkout $branch >/dev/null 2>&1
  fi

  # we'll get errors later if these are needed and don't exist
  chmod -f +x $dir/bin/{detect,compile,release} || true

  framework=$($dir/bin/detect $1)

  if [ $? != 0 ]; then
    echo "Buildpack did not detect sanely."
    exit 1
  fi
  $dir/bin/compile $1 $2 $3

  if [ $? != 0 ]; then
    exit 1
  fi

  if [ -x $dir/bin/release ]; then
    $dir/bin/release $1 > $1/last_pack_release.out
  fi
fi
